<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/6/19 0019
 * Time: 15:23
 */

namespace app\business\controller;
use app\common\controller\Business;
use app\common\controller\Rsa;
use app\common\controller\Sign;
use think\Db;
use think\Request;

class User extends Business
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->table = "business";
        $this->model = model( "business");
    }

    /**
     * 2019/6/19 0019 15:24
     * @desc 商户基本信息
     * @ApiParams
     * @ApiReturnParams
     */
    public function profile()
    {
        if( $this->request->isAjax() && $this->request->isPost() ){
            $act = $this->request->param('act', '');
            if( empty( $act ) ){
                $this->error( "请求方式错误！");
            }
            switch ( $act ){
                case 'ckPass'://校验原密码
                    $value = $this->request->param('value','');
                    if( compare_password( $this->user['password'],$value, $this->user['salt'] ) ){
                        $this->success("密码一致");
                    }
                    $this->error("与原密码不一致请重新输入！");
                    break;
                case 'rePass'://重新设置密码
                    $password = $this->request->param('value','');
                    if( !preg_match('/^\w{6,12}$/', $password) ){
                        $this->error( "请输入6-12位由数字字母下划线组成的密码！");
                    }
                    $data['salt'] = getSalt();
                    $data['password'] = encode_password( $password, $data['salt'] );
                    $id = $this->user['id'];
                    $res = $this->model->allowField(['password','salt'])->save($data,['id'=>$id]);
                    if( $res ){
                        $this->success( "密码设置成功！");
                    }
                    $this->error( "数据写入错误！");
                    break;
                case "safePass"://校验手机验证码
                    //校验手机验证码
                    $data = $this->request->param( );
                    if( !checkSms( $data['verify'] ) ){
                        $this->error( "验证码错误！");
                    }
                    $safePass = $this->request->param("safe_pass","");
                    if( empty( $safePass ) ){
                        $this->success("校验成功,请输入校验密码");
                    }
                    if( !preg_match( '/^(\w*(?=\w*\d)(?=\w*[A-Za-z])\w*){8,16}$/', $safePass) ){
                        $this->error("请输入8-16位字符（英文/数字/符号）至少两种或下划线组合");
                    }
                    $id = $this->user['id'];
                    $res = $this->model->allowField(['safe_pass'])->save($data,['id'=>$id]);
                    if( $res ){
                        session( "smsCode", null);
                        $this->success( "安全密码设置成功！","",1);
                    }
                    $this->error( "请求错误！请稍后再试！");
                    break;
            }
        }
        return $this->fetch();
    }

    /**
     * 2019/6/26 0026 15:01
     * @desc获取通道列表
     * @ApiParams
     * @ApiReturnParams
     */
    public function passageway()
    {
        if($this->request->isPost() && $this->request->isAjax()){

            $page = $this->request->param('page', 1, 'intval');
            $per = $this->request->param('limit', 10, 'intval');
            $this->order = $this->request->param('order', $this->order);
            $where = [
                'a.status'    => 1,
                'a.delete_time'   => 0
            ];
            $ns = "(select * from ".config("database.prefix")."user_passageway where business_id =".$this->user['id'].")";
            $list = db('passageway')
                ->alias('a')
                ->field('a.id,a.name,a.pay_type,a.rate,b.rate uRate,b.cost,b.status,b.id uid,b.business_id')
                ->join([
                    [ $ns.' b','b.passageway_id = a.id','left'],
                ])
                ->where( $where )
                ->limit( ($page-1)*$per, $per)
                ->order( 'a.id asc' )
                ->select();
            $sql = $this->model->getLastSql();
            $count = db('passageway')
                ->alias('a')
                ->where($where)
                ->count();
            $data = [
                'list' => $list,
                'count' => $count,
                'sql'   => $sql
            ];
            $this->success('获取成功！', '', $data);
        }
        return $this->fetch();
    }

    /**
     * 2019/6/27 0027 9:27
     * @desc收款管理账号
     * @ApiParams
     * @ApiReturnParams
     */
    public function account()
    {
        $id = $this->user['id'];
        if( $this->request->isAjax() && $this->request->isPost() )
        {
            $param = $this->request->param();
            $res = model('account')->allowField( true )->isUpdate( true )->save( $param, ['business_id'=>$id] );
            if( $res ){
                $this->success( "配置成功！");
            }
            $this->error( "系统繁忙！请稍后再试！");
        }
        $where = [
            'business_id'   => $id
        ];
        $data = model('account')->where( $where )->find();
        if( !$data ){
            $data = $where;
            $model = model('account');
            $model->allowField( true )->isUpdate( false )->save( $data );
            $id = $model->id;
            $data = $model->find( $id );
        }
        $this->assign( 'data', $data);
        return $this->fetch();
    }

    /**
     * 2019/6/27 0027 13:10
     * @desc 商户余额日志
     * @ApiParams
     * @ApiReturnParams
     * @throws \think\Exception
     */
    public function accountLog()
    {
        if ($this->request->isPost() && $this->request->isAjax()) {
            $page = $this->request->param('page', 1, 'intval');
            $per = $this->request->param('limit', 10, 'intval');
            $this->order = $this->request->param('order', $this->order);
            $stime = $this->request->param('stime', 0);
            $ltime = $this->request->param('ltime', 0);
            $where = [
                'bus_id'    => $this->user['id']
            ];
            if (empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $where['create_time'] = ['<=', $ltime];
            }
            if (!empty($stime) && empty($ltime)) {
                $stime = strtotime($stime);
                $where['create_time'] = ['>', $stime];
            }
            if (!empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $stime = strtotime($stime);
                $where['create_time'] = ['between', [$stime, $ltime]];
            }

            $page = $page - 1;
            $list = model('accountLog')
                ->field( "*")
                ->where($where)
                ->limit($page * $per, $per)
                ->order($this->order)
                ->select();
            $sql = model('accountLog')->getLastSql();
            $count = model('accountLog')->where($where)->count();
            $data = [
                'list' => $list,
                'count' => $count,
                'sql'   => $sql
            ];
            $this->success('获取成功！', '', $data);
        }
        return $this->fetch();
    }

    /**
     * withdraw
     * 2019/6/27 0027 18:02
     * @desc 提现列表
     * mixed
     */
    public function withdraw()
    {
        //判断是否开启提现
        $open_withdraw = deploy("open_withdraw");
        if( empty($open_withdraw) || empty( $this->user['withdraw'] )){
            $this->error( "未开启提现通道，请联系客服开启！", url("Index/welcome"));
        }

        $id = $this->user['id'];
        //校验安全密码
        if( empty( $this->user['safe_pass'] ) ){
            $this->error( "请前往设置安全密码！", url("user/profile") );
        }
        if( $this->request->isAjax() && $this->request->isPost() )
        {
            $param = $this->request->post();
            $param['bus_id'] = $id;
            //判断安全密码是否正确
            if( request()->param('safe_pass', "") != $this->user['safe_pass'] ){
                $this->error( "支付安全密码错误！");
            }
            $res = model('withdraw')->doInsert( $param );
            if( empty( $res['status'] ) ){
                $this->error( $res['msg'] );
            }
            if( !empty( $res['status'] ) ){
                $this->success( "申请成功！请耐心等待审核");
            }
            $this->error( "系统繁忙！请稍后再试！");
        }

        return $this->fetch();
    }

    /**
     * @desc 私钥加密&公钥加密
     * Created by PhpStorm
     * User: zhaolan
     * Date: 2019/7/16 0016 15:30
     * @return string
     */
    public function rsa()
    {
        $opensslConfigPath = "D:/phpstudy/PHPTutorial/Apache/conf/openssl.cnf";
        $config = array(
            "digest_alg"    => "sha512",
            "private_key_bits" => 1024,           //字节数  512 1024 2048  4096 等
            "private_key_type" => OPENSSL_KEYTYPE_RSA,   //加密类型
            "config"           => $opensslConfigPath,
        );
        $rsa = new Rsa();
        //获取私钥和公钥
        $keys = $rsa->new_rsa_key( $config );
        if( $keys == false ){
            $this->error( "密钥生成失败！查看配置参数！");
        }
        $privkey = $keys['privkey'];
        $pubkey  = $keys['pubkey'];
        //初始化rsa
        $rsa->init($privkey, $pubkey,TRUE);
        //原文
        $data = '你妈妈让你回家吃饭了';
        //私钥加密示例
        $priv = $rsa->priv_encode( $data );
        //私钥解密 $rsa->priv_decode( $priv)
        //公钥加密示例
        $pub = $rsa->pub_encode($data);
        //公钥解密 $rsa->pub_decode( $pub)
        return $pub."\n".$priv;
    }

    public function appKey(){
        //验证手机
        if( $this->request->isPost() ){
            $data = $this->request->param();
            if( !checkSms( $data['verify'] ) ){
                $this->error( "验证码错误！");
            }
            $api_key = Db::name("business")->where('id',$this->user['id'] )->value("api_key");
            $reset = $this->request->post('reset', 0, 'intval');
            if( empty( $api_key ) || $reset == 1){
                //生成随机32位安全码
                $salt = $this->createRandomStr( 32 );;
                $res = Db::name("business")->where('id',$this->user['id'] )->update(['api_key'=>$salt]);
                if( $res ){
                    $this->success( "成功获取！",'', $salt);
                }
                $this->error( "获取失败！重新获取！");
            } else {
                $this->success("成功获取！",'',$api_key);
            }

        }
        return $this->fetch();
    }

    private function createRandomStr($length){
        $str = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';//62个字符
        $i = 0;
        $r = "";
        while( $i < $length ){
            $str = str_shuffle($str);
            $r .= substr( $str, 0, 1);
            $i++;
        }
        return $r;
    }

    public function test()
    {
        $param = [
            'id' => 1,
            'order_sn' => 'sds4567sds',
            'amount'    => 1.21,
            'time'      => time(),
            'body'  => 'test',
            'body2'  => 'test"',
            'test'  => 'null',
            'more'  => '\sd'
        ];
        $sign = new Sign( $param );
        var_dump( $sign );
    }
}