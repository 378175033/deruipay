<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/6/26 0026
 * Time: 9:39
 */

namespace app\index\controller;
use app\common\controller\Business;
use think\Config;
use think\Db;
use think\Log;
use think\Request;

class Pay extends Business
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $business = $this->user;
        if( $this->request->isAjax() && $this->request->isPost() ){
            $money = $this->request->post("money",0);
            if( empty( $money ) ) $this->error( "请输入支付金额！");
            if( $money < 0 ) $this->error( "支付金额不合法！");
            $type = $this->request->post( "type", 0, 'intval');
            if( empty( $type ) ) $this->error( "请选择支付方式！");
            $where = [
                'a.delete_time'   => 0,
                'a.status'      => 1,
                'a.id'            => $type,
                'b.business_id' => $business['id'],
            ];
            $passage = db::name('passageway')
                        ->alias('a')
                        ->join([
                            ['user_passageway b','a.id = b.passageway_id','left']
                        ])
                        ->where($where)
                        ->select();
            $outTradeNo = "zcss" . date('Ymdhis') . mt_rand(100, 1000);
            $str = [
                'out_trade_no' => $outTradeNo,
                'business_id' => $business['id'],
                'order_id' => generate16Num(),
                'user_passageway_id' => $passage['0']['id'],
                'pay_from' => 1,
                'amount' => $money,
                'create_time' => time(),
                'status' => 3,
                'back_status' => 0,
            ];
            $order_add = Db('order')->insert($str);
            if (!$order_add) $this->error( "拉取支付失败");
            $data = [
                'title' => '测试支付1',
                'money' => $money,
                'out_trade_no'=>$outTradeNo,
            ];
            switch ( $passage[0]['pay_type'] ){
                case 'alipay':
                    $api = new \app\manage\controller\Api();
                    $res = $api->Face( $data );
                    if( $res['code'] == 1 ){
                        $this->success( "获取二维码成功！", '', $res['data']);
                    } else{
                        $this->error( $res['msg'] );
                    }
                    break;
                case 'wechat':

                    break;
                case 'union':
                    $api = new \app\manage\controller\Pay();
                    $data = ['accNo'=>'6216261000000000018','money'=> $money*100];
                    $customerInfo = ['smsCode' => '111111'];
                    $res = $api->pay( $data, $customerInfo );
                    if( $res['code'] == 1 ){
                        $this->success( "获取二维码成功！", '', $res['data']);
                    } else{
                        $this->error( $res['msg'] );
                    }
                    break;
                default:
                    $this->error( "暂无该支付方式！请重新选取");
            }
        }
        //获取支付通道
        $where = [
            'p.delete_time'   => 0,
            'p.status'        => 1,
            'user_passageway.status'       => 1,
            'user_passageway.business_id'  => $business['id'],
        ];
        $way = db('passageway')
            ->field('p.id,p.name')
            ->alias('p')
            ->join('user_passageway','user_passageway.passageway_id = p.id')
            ->where($where)
            ->select();
        $this->assign( 'way', $way);
        return $this->fetch();
    }

    /**
     * 2019/6/28 0028 10:31
     * @param Request $request
     * 支付宝回调
     */
    public function aliPayNotify()
    {
        $api = new \app\manage\controller\Api();
        return $api->succNotifyServer();
    }
}