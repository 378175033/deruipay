<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/6/17 0017
 * Time: 14:46
 */

namespace app\manage\controller;
use think\Controller;
use think\helper\Time;

class Api extends Controller
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public  function getmenus()
    {
        if( request()->isAjax() && request()->isPost() )
        {
            $where = [
                'delete_time'   => 0
            ];
            $menu = model('Menu')->where( $where )->select();
            $return = array();
            foreach ( $menu as $key => $val ){
                $return[$key]['path'] = "/".$val['controller']."/".$val['action'];
                $return[$key]['component'] = "manage/".$val['controller']."/".$val['action'];
                $return[$key]['name'] = $val['name'];
            }
            $this->success( "成功获取菜单！",'', $return );
        }
    }
    /**
     * 2019/6/19 0019 10:43
     * @desc 更新用户头像信息
     * @ApiParams
     * @ApiReturnParams
     */
    public function updateUser()
    {
        if( session( "?userInfo") ){
            $param = $this->request->param();
            $id = session( "userInfo")['id'];
            $res = model("user")->allowField(['avatar'])->isUpdate( true, ['id'=>$id])->save( $param );
            if( $res ){
                operaLog('管理员'.$id.'更换头像');
                $this->success( "头像上传成功！");
            } else {
                $this->error( "头像上传失败！");
            }
        }
    }
    public function getMenu( $current = 0 )
    {
        $where = [
            'delete_time'   => 0,
            'status'    => 1,
            'parent_id' => 0
        ];
        $list = model( 'menu')->where( $where )->field( "id,name"  )->select();
        $str = "";
        if( count( $list ) ){
            foreach ( $list as $v ){
                $cc = "";
                if( $v['id'] == $current ){
                    $cc = "selected";
                }
                $str .= "<option value='".$v['id']."' $cc>|--".$v['name']."</option>";
                $where['parent_id'] = $v['id'];
                $child = model( 'menu')->where( $where )->field( "id,name"  )->select();
                foreach ( $child as $val ){
                    $cc = "";
                    if( $val['id'] == $current ){
                        $cc = "selected";
                    }
                    $str .= "<option value='".$val['id']."' $cc>|--|--".$val['name']."</option>";
                }
            }
        }
        return $str;
    }

    /**
     * 2019/6/5 0005 16:52
     * @desc 获取权限配置菜单列表
     * @ApiParams id 用户组ID
     * @ApiReturnParams data tree结构的菜单列表
     */
    public function getAuth()
    {
        $id = request()->param( 'id', 0, 'intval');
        if( empty( $id ) ) {
            die("参数错误！");
        }
        $where = [
            'id' => $id,
            'status'    => 1
        ];
        $rule = model('user')->where( $where )->value('rule');
        $data = model('menu')->where(['delete_time'=>0])->field('id,parent_id pId,name')->select();
        foreach ( $data as $key => $v ){
            if( in_array( $v['id'], explode(',', $rule) ) ){
                $data[$key]['checked'] = true;
            }
        }
        $this->success( $data );
    }

    /**
     * 2019/6/19 0019 17:44
     * @desc清除缓存
     * @ApiParams
     * @ApiReturnParams
     */
    public function clear()
    {
        $dir_name = "..".DS."/runtime";
        $this->delete_dir_file( $dir_name );
        operaLog($this->admin_id.'清除缓存');
        $this->success( '清除成功', 'index/index' );
    }

    /**
     * 2019/6/19 0019 17:58
     * @desc 循环删除缓存文件
     * @ApiParams
     * @ApiReturnParams
     * @param string $dir_name
     * @return bool
     */
    public function delete_dir_file( $dir_name )
    {
        $result = false;
        if(is_dir($dir_name)){ //检查指定的文件是否是一个目录
            if ($handle = opendir($dir_name)) {   //打开目录读取内容
                while (false !== ($item = readdir($handle))) { //读取内容
                    if ($item != '.' && $item != '..') {
                        if (is_dir($dir_name . DS . $item)) {
                            $this->delete_dir_file($dir_name . DS . $item);
                        } else {
                            unlink($dir_name . DS . $item);  //删除文件
                        }
                    }
                }
                closedir($handle);  //打开一个目录，读取它的内容，然后关闭
                if (rmdir($dir_name)) { //删除空白目录
                    $result = true;
                }
            }
        }
        return $result;
    }

    /**
     *  商家收款 （当面付）
     * @param $data array
     */
    public function Face( $data )
    {
        require_once dirname(dirname(dirname(dirname(__FILE__)))) . "/vendor/dangmianfu_demo_php/f2fpay/model/builder/AlipayTradePrecreateContentBuilder.php";
        require_once dirname(dirname(dirname(dirname(__FILE__)))) . "/vendor/dangmianfu_demo_php/f2fpay/service/AlipayTradeService.php";
        require_once dirname(dirname(dirname(dirname(__FILE__)))) . "/vendor/dangmianfu_demo_php/f2fpay/qrpay_test.php";
        $orderTitel = $data['title'];
        $goods = $data['money'];
        $outTradeNo = "zcss" . date('Ymdhis') . mt_rand(100, 1000);
        $succ = pay_face($outTradeNo, $orderTitel, $goods, $config);
        $this->success( "获取二维码成功！",'', $succ);
        if ($succ != 1 && $succ != 3) {
            $this->success('支付宝创建订单二维码成功', '', $succ);
        } elseif ($succ == 1) {
            $this->error('支付宝创建订单二维码失败', '');
        } else {
            $this->error('系统异常，状态未知!!', '');
        }
    }

}