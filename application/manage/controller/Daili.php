<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/10/29 0029
 * Time: 13:29
 */

namespace app\manage\controller;


use app\common\controller\Manage;
use think\Validate;

class Daili extends Manage
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->table = "daili";
        $this->model = model("daili");
    }

    public function index()
    {
        if ($this->request->isPost()){
            $id = $this->request->param('id');
            if ($id){
                $this->request->post(['e-top_id' => $id]);
            }

            $this->join = [
                ['daili b', 'a.top_id = b.id', 'left']
            ];
            $this->field = ' a.*,b.name top_name';
        }else{
            $id = $this->request->param('id', '');
            $this->assign('id', $id);
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }

    public function add()
    {
        if ($this->request->isPost()) {
            $password = $this->request->param('password', '');
            $data = $this->request->param();
            $data['salt'] = getSalt();
            $data['password'] = encode_password($password, $data['salt']);
            $data['token'] = $this->get_token();
            if ($this->isValidate) {
                $validate = validate($this->table);
                if (!$validate->check($data)) {
                    $this->error($validate->getError());
                }
            }
            $res = $this->model->allowField(true)->data($data)->isUpdate(false)->save();
            if ($data['top_id']){
                $data['id'] = $this->model->getLastInsID();
                $this->changeParent($data);
            }
            if ($res) {
                operaLog($this->admin_id . '添加成功');
                $this->success('新增成功');
            }
            $this->error('新增失败！');
        } else {
            $top_list = $this->model->where('status', 1)->column('id, name');
            $this->assign('top_list', $top_list);
        }
        return $this->fetch();
    }

    public function edit()
    {
        if ($this->request->isPost()) {
            $password = $this->request->param('password', '');
            $data = $this->request->param();
            if ($password) {
                $data['salt'] = getSalt();
                $data['password'] = encode_password($password, $data['salt']);
            } else {
                unset($data['password']);
            }
            $token = $this->request->param('token', '');
            $old_token = $this->model->where('id', $data['id'])->value('token');
            if ($token != $old_token) {
                $validate = new Validate();
                if (!$validate->check($data, [['token|邀请码', 'unique:daili']])) {
                    $this->error($validate->getError());
                }
            }

            if ($this->isValidate) {
                $validate = validate($this->table);
                if (!$validate->check($data)) {
                    $this->error($validate->getError());
                }
            }
            if ($data['top_id']) {
                $new_top_parent = $this->model->where('id', $data['top_id'])->value('parent');
                if (strpos($new_top_parent, $data['id']) !== false) {
                    $this->error('不可成为下级代理的下级');
                }
            }
            $old_top_id = $this->model->where('id', $data['id'])->value('top_id');
            $res = $this->model->allowField(true)->isUpdate(true)->data($data)->save();
            if ($res && $old_top_id != $data['top_id']) {
                $this->changeParent($data);
            }
            if ($res) {
                operaLog($this->admin_id . 'edit编辑');
                $this->success('修改成功');
            }
            $this->error('修改失败！');
        } else {
            $id = $this->request->param('id');
            $top_list = $this->model->where('status', 1)->column('id, name');
            foreach ($top_list as $k => $v) {
                if ($id == $k)
                    unset($top_list[$k]);
            }
            $this->assign('top_list', $top_list);
            return parent::edit();
        }
    }


    /* @desc 修改被修改代理的上级的parent 及其下级的parent
     * @param $data
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function changeParent($data)
    {
        $top_parent = $this->model->where('id', $data['top_id'])->value('parent');
        $current_parent = trim($top_parent ? $top_parent . ',' . $data['top_id'] : $data['top_id'], ',');
        $this->model->where('id', $data['id'])->update(['parent' => $current_parent]);
        $daili_list = $this->model->where('top_id', $data['id'])->column('id');
        foreach ($daili_list as $daili) {
            $daili_data = $this->model->where('id', $daili)->find();
            $this->changeParent($daili_data->toArray());
        }
    }

    // 生成邀请码
    public function get_token()
    {
        $token = getSalt(6);
        if ($this->model->where('token', $token)->count()) {
            $token = $this->get_token();
        }
        return $token;
    }

    public function passageway()
    {
        $id = $this->request->param('id', 0, 'intval');
        if (empty($id)) {
            $this->error("商户参数错误！");
        }
        if (request()->isAjax() && request()->isPost()) {
            $page = $this->request->param('page', 1, 'intval');
            $per = $this->request->param('limit', 10, 'intval');
            $this->order = $this->request->param('order', $this->order);
            $where = [
                'a.status' => 1,
                'a.delete_time' => 0
            ];
            $ns = "(select * from " . config("database.prefix") . "daili_passageway where daili_id =" . $id . ")";
            $list = model('passageway')
                ->alias('a')
                ->field('a.id,a.name,a.pay_type,a.rate,b.rate uRate,b.cost,b.status,b.id uid,b.daili_id')
                ->join([
                    [$ns . ' b', 'b.passageway_id = a.id', 'left'],
                ])
                ->where($where)
                ->limit(($page - 1) * $per, $per)
                ->order('a.id asc')
                ->select();
            $sql = $this->model->getLastSql();
            $count = model('passageway')
                ->alias('a')
                ->where($where)
                ->count();
            $data = [
                'list' => $list,
                'count' => $count,
                'sql' => $sql
            ];
            $this->success('获取成功！', '', $data);
        }
        $this->assign('pay_type', config('pay_type'));
        $this->assign("id", $id);
        return $this->fetch();
    }

    public function setPassageway()
    {
        $param = $this->request->param();

        if ($this->request->isPost() && $this->request->isAjax()) {
            if ($param['rate'] >= 1) {
                $this->error('通道费率不能大于1');
            }
            if ($param['cost'] < 0.01) {
                $this->error('用户通道最低手续费不能小于0.01');
            }
            $isUpdate = $param['id'] ? true : false;
            $res = model('dailiPassageway')->allowField(true)->isUpdate($isUpdate)->save($param);
            if ($res) {
                $this->success("设置成功！");
            }
            $this->error("设置失败！");
        }
        $where = [
            'daili_id' => $param['id'],
            'passageway_id' => $param['uid']
        ];
        $data = model('dailiPassageway')->where($where)->find();
        $this->assign('data', $data);
        $this->assign('param', $param);
        return $this->fetch();
    }


    public function business_list()
    {
        if ($this->request->isPost()){
            $id = $this->request->param('id');
            if ($id){
                $this->request->post(['e-top_id' => $id]);
            }
            $this->model = model('business');
        }else{
            $id = $this->request->param('id', '');
            $this->assign('id', $id);
        }
        return parent::index(); // TODO: Change the autogenerated stub
    }
}