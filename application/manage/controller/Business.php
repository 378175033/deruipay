<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/6/18 0018
 * Time: 14:48
 */

namespace app\manage\controller;
use app\common\controller\Manage;

class Business extends Manage
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->table = "business";
        $this->model = model( "business");
    }

    /**
     * 2019/6/18 0018 15:44
     * @desc
     * @ApiParams
     * @ApiReturnParams
     */
    public function add()
    {
        if( request()->isAjax() && request()->isAjax() ){
            $password = $this->request->param( 'password', '');
            if( empty( $password ) ){
                $this->error( "密码不能为空！");
            }
            if( !preg_match('/^\w{6,12}$/', $password) ){
                $this->error( "请输入6-12位由数字字母下划线组成的密码！");
            }
            $data = $this->request->param();
            if( $data['frozen_money'] > $data['money'] ){
                $this->error( "冻结金额不能超过账户余额！");
            }
            $data['salt'] = getSalt();
            $data['password'] = encode_password( $password, $data['salt'] );
            $data['create_time'] = time();

            if( $this->isValidate ){
                $validate = validate($this->table);
                if (!$validate->check($data)) {
                    $this->error($validate->getError());
                }
            }
            $data['shop_sn'] = $this->model->max("shop_sn")+1;
            $res = $this->model->allowField( true )->data($data)->isUpdate( false )->save();
            if ($res) {
                $this->success('新增成功');
            }
            $this->error('新增失败！');
        }
        return $this->fetch();
    }

    /**
     * 2019/6/18 0018 16:24
     * @desc 编辑商户信息
     * @ApiParams
     * @ApiReturnParams
     */
    public function edit()
    {
        $id = $this->request->param('id', 0, 'intval');
        if (empty($id)) {
            $this->error("参数错误！");
        }
        if( request()->isAjax() && request()->isAjax() ){
            $data = $this->request->param();
            $password = $this->request->param( 'password', '');
            if( !empty( $password ) ){
                if( !preg_match('/^\w{6,12}$/', $password) ){
                    $this->error( "请输入6-12位由数字字母下划线组成的密码！");
                }
                $data['salt'] = getSalt();
                $data['password'] = encode_password( $password, $data['salt'] );
            };
            if( $data['frozen_money'] > $data['money'] ){
                $this->error( "冻结金额不能超过账户余额！");
            }
            if( $this->isValidate ){
                $validate = validate($this->table);
                if (!$validate->check($data)) {
                    $this->error($validate->getError());
                }
            }
            $res = $this->model->allowField( true )->data($data)->isUpdate( true )->save();
            if ($res) {
                operaLog($this->admin_id.'更新商户:'.$data['name'].'信息');
                $this->success('更新成功');
            }
            $this->error('更新失败！');
        }
        $data = $this->model->where('id', $id)->find();
        $this->assign('data', $data);
        return $this->fetch();
    }
    /**
     * 2019/6/18 0018 15:52
     * @desc审核商户信息
     * @ApiParams
     * @ApiReturnParams
     */
    public function check()
    {
        $id = $this->request->param( 'id', 0, 'intval');
        if( empty( $id ) ){
            $this->error( "参数错误！");
        }
        if( request()->isPost() ){
            $data = $this->request->post('');
            $data['check_time'] = time();
            $res = $this->model->allowField(true)->where( ['id'=>$id] )->data( $data )->update();
            if( $res ){
                operaLog($this->admin_id.'审核商户信息');
                $this->success( "设置成功！");
            }
            $this->error( "请稍后再试！");
        }
        $where = [
            'id' => $id,
            'delete_time'   => 0
        ];
        $data = $this->model->where( $where )->field( 'id,name,check,check_desc,check_time')->find();
        if( !$data ){
            $this->error( "商户不存在！");
        }
        $this->assign( "data", $data );
        return $this->fetch();
    }

    /**
     * 2019/6/20 0020 10:02
     * @desc手动设置商户余额
     * @ApiParams
     * @ApiReturnParams
     */
    public function account()
    {
        $id = $this->request->param('id',0,'intval');
        $type = $this->request->param('type',0,'intval');
        if( empty( $type ) || empty( $id )){
            $this->error( "商户参数错误！");
        }
        if( request()->isPost() && request()->isAjax() ){
            $data = request()->param();
            $info = 1;
            $dif = 0;
            switch ( $type ){
                case 1://修改余额
                    if( empty( $data['inc'] ) ){
                        $this->error( "请设置更改余额数量");
                    }
                    switch ( $data['way'] )
                    {
                        case 1://增加余额
                            $dif = $data['inc'];
                            break;
                        case 2://减少余额
                            if( $data['inc'] > $data['money'] ){
                                $this->error("您最多可以扣除余额".$data['money']);
                            }
                            $dif = -$data['inc'];
                            break;
                        default:
                            $this->error( "参数错误！");
                    }
                    $data['money'] = $data['money'] + $dif;
                    break;
                case 2://修改冻结金额
                    //获取原冻结金额
                    $frozen = $this->model->where( 'id', $id)->value('frozen_money');
                    $dif =  $frozen - $data['frozen_money'];
                    $data['money'] = $data['money'] + $dif;
                    if( $data['money'] < 0 ){
                        $this->error( "没有多余余额加入冻结金额！");
                    }
                    $info = 2;
                    break;
                default:
                    $this->error( "参数错误！");
            }
            $res = $this->model->allowField(['money','frozen_money'])->isUpdate( true )->save( $data,['id'=>$id] );
            if( $res ){
                //将金额变动记录到数据表
                $insert = [
                    'bus_id'    => $id,
                    'account'   => $dif,
                    'desc'      => $data['desc'],
                    'info'      => $info
                ];
                model( 'account_log')->add( $insert );
                $this->success( "操作成功！", "", $info."当前余额为:".$data['money']);
            }
            $this->error( "请稍后再试！");
        }
        $data = $this->model->where( "id",$id)->field( "id,money,frozen_money")->find();
        $this->assign( "data", $data);
        $this->assign( 'type', $type);
        return $this->fetch();
    }

    /**
     * 2019/6/20 0020 14:47
     * @desc 查看商户的余额变动明细
     * @ApiParams
     * @ApiReturnParams
     */
    public function account_log()
    {
        $id = $this->request->param('id',0,'intval');
        if( empty( $id )){
            $this->error( "商户参数错误！");
        }
        if( request()->isAjax() && request()->isPost() )
        {
            $page = $this->request->param('page', 1, 'intval');
            $per = $this->request->param('limit', 10, 'intval');
            $this->order = $this->request->param('order', $this->order);
            $param = $this->request->param();
            $where = [ 'a.bus_id' => $id ];
            foreach ($param as $key => $val) {
                $ps = substr($key, 0, 2);
                $vl = substr($key, 2);
                switch ($ps) {
                    case 'l-':
                        if (!empty($val)) $where["a.".$vl] = ['like', '%' . $val . '%'];
                        break;
                    case 'e-':
                        if (!empty($val))  $where["a.".$vl] = $val;
                        break;
                    case 'i-':
                        if (!empty($val)) $where["a.".$vl] = ['in',$val];
                        break;
                    default:
                        break;
                }
            }
            $stime = $this->request->param('stime', 0);
            $ltime = $this->request->param('ltime', 0);
            if (empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $where["a.".'create_time'] = ['<=', $ltime];
            }
            if (!empty($stime) && empty($ltime)) {
                $stime = strtotime($stime);
                $where["a.".'create_time'] = ['>', $stime];
            }
            if (!empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $stime = strtotime($stime);
                $where["a.".'create_time'] = ['between', [$stime, $ltime]];
            }
            $page = $page - 1;
            $list = model('AccountLog')
                ->alias('a')
                ->join( [
                    [config('database.prefix').'business b', 'b.id = a.bus_id','left'],
                    [config('database.prefix').'user c', 'c.id = a.user_id','left'],
                ])
                ->field( "a.info,a.desc,a.account,a.create_time,a.id,b.name,c.nickname")
                ->where($where)
                ->limit($page * $per, $per)
                ->order($this->order)
                ->select();
            $sql = $this->model->getLastSql();
            $count = model('AccountLog')
                ->alias('a')
                ->join( [
                    [config('database.prefix').'business b', 'b.id = a.bus_id','left'],
                    [config('database.prefix').'user c', 'c.id = a.user_id','left'],
                ])
                ->where($where)
                ->count();
            $data = [
                'list' => $list,
                'count' => $count,
                'sql'   => $sql
            ];
            $this->success('获取成功！', '', $data);
        }
        $this->assign("id", $id);
        return $this->fetch();
    }

    /**
     * 2019/6/20 0020 14:48
     * @desc查看商户的通道信息
     * @ApiParams
     * @ApiReturnParams
     */
    public function passageway()
    {
        $id = $this->request->param('id',0,'intval');
//        return url();
        if( empty( $id )){
            $this->error( "商户参数错误！");
        }
        if( request()->isAjax() && request()->isPost() )
        {
            $page = $this->request->param('page', 1, 'intval');
            $per = $this->request->param('limit', 10, 'intval');
            $this->order = $this->request->param('order', $this->order);
            $param = $this->request->param();
            $where = [ 'a.business_id' => $id ];
            foreach ($param as $key => $val) {
                $ps = substr($key, 0, 2);
                $vl = substr($key, 2);
                switch ($ps) {
                    case 'l-':
                        if (!empty($val)) $where["a.".$vl] = ['like', '%' . $val . '%'];
                        break;
                    case 'e-':
                        if (!empty($val))  $where["a.".$vl] = $val;
                        break;
                    case 'i-':
                        if (!empty($val)) $where["a.".$vl] = ['in',$val];
                        break;
                    default:
                        break;
                }
            }
            $stime = $this->request->param('stime', 0);
            $ltime = $this->request->param('ltime', 0);
            if (empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $where["a.".'create_time'] = ['<=', $ltime];
            }
            if (!empty($stime) && empty($ltime)) {
                $stime = strtotime($stime);
                $where["a.".'create_time'] = ['>', $stime];
            }
            if (!empty($stime) && !empty($ltime)) {
                $ltime = strtotime($ltime);
                $stime = strtotime($stime);
                $where["a.".'create_time'] = ['between', [$stime, $ltime]];
            }
            $page = $page - 1;
            $list = model('user_passageway')
                ->alias('a')
                ->join( [
                    [config('database.prefix').'passageway b', 'a.passageway_id = b.id and b.status = 1'],
                ])
                ->field( "a.id,name,passageway_id,a.cost,a.rate,max,mini,a.status,pay_type,a.create_time")
                ->where($where)
                ->limit($page * $per, $per)
                ->order('a.id desc')
                ->select();
            $sql = $this->model->getLastSql();
            $count = model('user_passageway')
                ->alias('a')
                ->join( [
                    [config('database.prefix').'business b', 'a.business_id = b.id and b.status = 1'],
                ])
                ->where($where)
                ->count();
            $data = [
                'list' => $list,
                'count' => $count,
                'sql'   => $sql
            ];
            $this->success('获取成功！', '', $data);
        }
        $this->assign("id", $id);
        return $this->fetch();
    }
}